;Jorge Alberto Rodriguez Mayorga
;200915030

section .data

header_txt db 10,"Universidad de San Carlos de Guatemala"
                db 10,"Facultad Ingenieria"
                db 10,"Arquitectura de Computadores y Ensambladores 1"
                db 10,"Primer Semestre 2016"
                db 10,"Seccion B"
                db 10,"Jorge Alberto Rodriguez Mayorga" 
                db 10,"200915030"
                db 10,"Practica 6"
                db 10,""
                db 10,""
                db 10,"Que desea realizar? 1.Calculadora 0.Salir"
                db 10,"",10,0

headerlen equ $ - header_txt
;
calc_header db "Modo Calculadora activado",10,13,10,13,"Ingrese Opcion 1.Operaciones  2.Fibonacci",10,13,0
calclen equ $ - calc_header
;
operations_header db "Menu de operaciones",10,13,10,13,0
opl equ $ - operations_header
;
fibonacci_header db "Menu Fibonacci",10,13,0
fibl equ $ - fibonacci_header
;
operator_msg db 10,13,"Ingrese Operador: ",0
oplen equ $ - operator_msg
;
second_msg db "Ingrese Numero: ",0
secl equ $ - second_msg
;
result db "Resultado: ",0
reslen equ $ - result
suma  db "SUM",10,13
resta db "RES",10,13
multi db "MUL",10,13
divi  db "DIV",10,13



section .bss 

menuInput:  resb 2 
calcInput:  resb 2 
num1 resb 51
num2: resb 4
operator: resb 1
tmp : resb 1
res : resb 32
tstResult : resb 32


section .text


global _start

%macro print 2
        mov eax, 4  
        mov ebx, 1   
        mov ecx, %1  
        mov edx, %2  
        sub esp ,4 
        int 80h  
        add esp, 4

%endmacro

%macro read 2
        mov eax, 3  
        mov ebx, 0   
        mov ecx, %1  
        mov edx, %2 
        sub esp ,4 
        int 80h  
        add esp, 4
%endmacro

_start:
    call Home

Home:
    print header_txt, headerlen ; Imprimir Header
    read menuInput, 2           ; Leer input del usuario
    mov al,  byte [menuInput]
    cmp al,'1'
    je CalculatorMode
    jmp Next
ret

Next:
    cmp al, '0'
    je Exit
    jmp Home
ret

Exit:  
    mov eax, 1  
    mov ebx, 0 
    int 80h
ret

CalculatorMode:
    print calc_header, calclen ; Imprimir Instruccion
    read calcInput, 2          ; Leer input del usuario 
    mov al,  byte [calcInput]  ; Comparar operaciones o fibonnacci
    cmp al,'1'
    je Init_Operations
    cmp al,'2'
    je Fibonacci
    jmp Home

cll_Init:
    call Init_Operations
    jmp CalculatorMode

Init_Operations:
    print second_msg, secl
    call ReadOP
    call print_digit
    call Operations
    ;push eax
    
    ;pop eax
    
ret

Operations:
    push eax
    print operator_msg, oplen
    read operator, 2
    pop eax
    cmp byte[operator], '+'
    jz cll_SUM
    cmp byte[operator],'-'
    jz cll_RES
    cmp byte[operator],'*'
    jz cll_MUL
    cmp byte[operator],'/'
    jz cll_DIV

    Call Exit

cll_SUM:
    call SUM
    jmp EndOp

cll_RES:
    call RES
    jmp EndOp

cll_MUL:
    call MUL
    jmp EndOp

cll_DIV:
    call DIV
    jmp EndOp



SUM:
    push eax
    print second_msg, secl
    call ReadOP
    call print_digit
    xor edx,edx
    mov edx, eax
    pop eax
    add eax, edx
ret

RES:
    push eax
    print second_msg, secl
    call ReadOP
    mov edx, eax
    pop eax
    sub eax, edx

ret

MUL:
    push eax
    print second_msg, secl
    call ReadOP
    mov edx, eax
    pop eax
    mul edx

ret

DIV:
    push eax
    print second_msg, secl
    call ReadOP
    xor edx,edx 
    mov ecx, eax
    xor eax, eax
    pop eax
    div ecx

ret

EndOp:
    push eax
    print result, reslen
    pop eax
    call print_digit
    jmp Operations


ReadOP:
    push edx
    push ecx

    read num1, 50

    mov edx, eax
    sub edx, 0x1
    xor eax, eax
    xor ecx, ecx

    call ReadNumber

    pop ecx
    pop edx
ret

ReadNumber:
    cmp ecx, edx
    jz FinishRead
    push edx
    xor edx, edx
    xor bl, bl
    mov edx, 0xA
    mov bl, [num1 + ecx]
    mov [tmp], bl
    push ecx
    mov ecx, dword[tmp]
    sub ecx, 0x30
    mul edx
    add eax, ecx
    pop ecx
    pop edx
    add ecx, 0x1
    call ReadNumber
FinishRead:

ret

printRes:
    push edx
    push ecx
    push ebx
    push eax

    print res, 1

    pop eax
    pop ebx
    pop ecx
    pop edx
ret

print_digit:
    push edx
    push ecx
    push ebx
    push eax

    cmp eax, 0x0
    jz stop

    xor edx,edx
    xor ecx, ecx 
    mov ecx, 0Ah
    div ecx
    push edx
    call print_digit
    pop edx
    add edx, 48
    mov[res], edx
    call printRes
    
stop:
    pop eax
    pop ebx
    pop ecx
    pop edx
ret



Fibonacci:
    print fibonacci_header, fibl
    jmp Home



